apply plugin : 'com.android.application'
apply plugin : 'android-aspectjx'
apply from : '../common.gradle'



android {

    // 资源目录存放指引：https://developer.android.google.cn/guide/topics/resources/providing-resources
    defaultConfig {

        applicationId 'com.huaxixingfu.sqj'

        // 仅保留中文语种的资源
        resConfigs 'zh'

        // 仅保留 xxhdpi 图片资源（目前主流分辨率 1920 * 1080）
        resConfigs 'xxhdpi'

        // 混淆配置
        proguardFiles 'proguard-sdk.pro', 'proguard-app.pro'

        // 日志打印开关
        buildConfigField('boolean', 'LOG_ENABLE', '' + LOG_ENABLE + '')
        // 测试包下的 BuglyId
        buildConfigField('String', 'BUGLY_ID', '"' + BUGLY_ID + '"')

        /*// 测试服务器的主机地址
        buildConfigField('String', 'HOST_URL', '"' + HOST_URL + '"')
        buildConfigField('String', 'HOST_WEBSOCKET_URL', '"' + HOST_WEBSOCKET_URL + '"')
        buildConfigField('String', 'HOST_PIC_FILE_URL', '"' + HOST_PIC_FILE_URL + '"')*/

//      腾讯TPNS推送配置
        manifestPlaceholders = [
                XG_ACCESS_ID : "1500030246",
                XG_ACCESS_KEY : "ANKA26CA45YU",
        ]
    }

    signingConfigs {
        config {
            storeFile file(StoreFile)
            storePassword StorePassword
            keyAlias KeyAlias
            keyPassword KeyPassword
        }
    }

    viewBinding {
        enabled = true
    }

    // 构建配置：https://developer.android.google.cn/studio/build/build-variants
    buildTypes {

        debug {
            // 给包名添加后缀
            applicationIdSuffix '.debug'
            // 调试模式开关
            debuggable true
            jniDebuggable true
            // 压缩对齐开关
            zipAlignEnabled false
            // 移除无用的资源
            shrinkResources false
            // 代码混淆开关
            minifyEnabled false
            // 签名信息配置
            signingConfig signingConfigs.config
            // 添加清单占位符
            addManifestPlaceholders([
                    'app_name'    :    '社区家 Debug 版'
            ])
            // 调试模式下只保留一种架构的 so 库，提升打包速度,录音时注释掉，
            // 不然会初始化失败，因为lame编译了多种架构，而当前只有一种
            // 解决：修改源码编译架构，保留与当前对应的架构
            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }

           /* buildConfigField('String', 'HOST_URL', '"' + TEST_HOST_URL + '"')
            buildConfigField('String', 'HOST_WEBSOCKET_URL', '"' + TEST_HOST_WEBSOCKET_URL + '"')
            buildConfigField('String', 'HOST_PIC_FILE_URL', '"' + TEST_HOST_PIC_FILE_URL + '"')
          */

            buildConfigField('String', 'HOST_URL', '"' + HOST_URL + '"')
            buildConfigField('String', 'HOST_WEBSOCKET_URL', '"' + HOST_WEBSOCKET_URL + '"')
            buildConfigField('String', 'HOST_PIC_FILE_URL', '"' + HOST_PIC_FILE_URL + '"')

        }

        preview.initWith(debug)
        preview {
            applicationIdSuffix ''
            // 添加清单占位符
            manifestPlaceholders = ['app_name' : '社区家 Preview 版']
        }

        release {
            // 调试模式开关
            debuggable true
            jniDebuggable false
            // 压缩对齐开关
            zipAlignEnabled true
            // 移除无用的资源
            shrinkResources false
            // 代码混淆开关
            minifyEnabled false
            // 签名信息配置
            signingConfig signingConfigs.config
            // 添加清单占位符
            addManifestPlaceholders([
                    'app_name'    :    '@string/app_name'
            ])
            // 仅保留两种架构的 so 库，根据 Bugly 统计得出
            ndk {
                // armeabi：万金油架构平台（占用率：0%）
                // armeabi-v7a：曾经主流的架构平台（占用率：10%）
                // arm64-v8a：目前主流架构平台（占用率：95%）
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }

            buildConfigField('String', 'HOST_URL', '"' + HOST_URL + '"')
            buildConfigField('String', 'HOST_WEBSOCKET_URL', '"' + HOST_WEBSOCKET_URL + '"')
            buildConfigField('String', 'HOST_PIC_FILE_URL', '"' + HOST_PIC_FILE_URL + '"')


        }
    }

    packagingOptions {
        // 剔除这个包下的所有文件（不会移除签名信息）
        exclude 'META-INF/*******'
    }

    // AOP 配置（exclude 和 include 二选一）
    // 需要进行配置，否则就会引发冲突，具体表现为：
    // 第一种：编译不过去，报错：java.util.zip.ZipException：Cause: zip file is empty
    // 第二种：编译能过去，但运行时报错：ClassNotFoundException: Didn't find class on path: DexPathList
    aspectjx {
        // 排除一些第三方库的包名（Gson、 LeakCanary 和 AOP 有冲突）
        // exclude 'androidx', 'com.google', 'com.squareup', 'org.apache', 'com.alipay', 'com.taobao', 'versions.9'
        // 只对以下包名做 AOP 处理
        include android.defaultConfig.applicationId
    }

    applicationVariants.all { variant ->
        // apk 输出文件名配置
        variant.outputs.all { output ->
            outputFileName = rootProject.getName() + '_v' + variant.versionName + '_' + variant.buildType.name
            if (variant.buildType.name == buildTypes.release.getName()) {
                outputFileName += '_' + new Date().format('MMdd')
            }
            outputFileName += '.apk'
        }
    }


    //project配置完成后回调
    afterEvaluate {

        android.applicationVariants.all { variant ->
            variant.assemble.doLast {
                if (variant.buildType.name == ('release')) {
                    def apkPath = variant.outputs.first().outputFile as File
                    def apkFolderPath = apkPath.getParent()
                    def apkstor = android.signingConfigs.config.storeFile.absoluteFile
                    def base = project.rootDir.absolutePath + '/jiagu/jiagu.jar'
                    def shPath = project.rootDir.absolutePath + '/jiagu/jiagu.sh'
                    def jiaguRoot = project.rootDir.absolutePath + '/jiagu'
                    println "================shPath================${shPath}"
                    println "================base================${base}"
                    println "================apkPath================${apkPath}"
                    println "=================apkFolderPath===============${apkFolderPath}"
                    println "=================jiaguRoot===============${jiaguRoot}"
                    println ".keyPassword  ===============${android.signingConfigs.config.storeFile.absoluteFile}"

                    exec {
                        ignoreExitValue true
                        println "=======开始执行shell========"
                        commandLine "sh", shPath, apkPath, apkFolderPath, apkstor, base,jiaguRoot

                    }
                }
            }
        }
    }

}

// 添加构建依赖项：https://developer.android.google.cn/studio/build/dependencies
dependencies {
    // 基类封装
    implementation project(':library:base')
    // 控件封装
    implementation project(':library:widget')
    // 友盟封装
    implementation project(':library:umeng')

    implementation project(':library:picker')

    implementation project(':library:idcardcamera')

    implementation project(':library:tuicalling')


    // 网络请求框架
    implementation project(':library:easyhttp')
    // OkHttp 框架：https://github.com/square/okhttp
    // noinspection GradleDependency
    implementation 'com.squareup.okhttp3:okhttp:3.12.13'


    //implementation project(':library:im_push_service_sdk')

    // 权限请求框架：
    implementation 'com.github.getActivity:XXPermissions:12.3'

    // 标题栏框架：
    implementation 'com.github.getActivity:TitleBar:9.2'

    // 吐司框架：
    implementation 'com.github.getActivity:ToastUtils:9.5'


    // Json 解析框架：
    implementation 'com.google.code.gson:gson:2.8.8'
    // Gson 解析容错：
    implementation 'com.github.getActivity:GsonFactory:5.2'

    // Shape 框架：
    implementation 'com.github.getActivity:ShapeView:6.0'

    // AOP 插件库：https://mvnrepository.com/artifact/org.aspectj/aspectjrt
    implementation 'org.aspectj:aspectjrt:1.9.6'

    // 图片加载框架：https://github.com/bumptech/glide
    // 官方使用文档：https://github.com/Muyangmin/glide-docs-cn
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    // 沉浸式框架：https://github.com/gyf-dev/ImmersionBar
    implementation 'com.gyf.immersionbar:immersionbar:3.0.0'

    // 手势 ImageView：https://github.com/Baseflow/PhotoView
    implementation 'com.github.Baseflow:PhotoView:2.3.0'

    // Bugly 异常捕捉：https://bugly.qq.com/docs/user-guide/instruction-manual-android/?v=20190418140644
    implementation 'com.tencent.bugly:crashreport:3.4.4'
    implementation 'com.tencent.bugly:nativecrashreport:3.9.2'

    // 动画解析库：https://github.com/airbnb/lottie-android
    // 动画资源：https://lottiefiles.com、https://icons8.com/animated-icons
    implementation 'com.airbnb.android:lottie:4.1.0'

    // 上拉刷新下拉加载框架：https://github.com/scwang90/SmartRefreshLayout
    implementation 'com.scwang.smart:refresh-layout-kernel:2.0.3'
    implementation 'com.scwang.smart:refresh-header-material:2.0.3'

    // 日志打印框架：https://github.com/JakeWharton/timber
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // 指示器框架：https://github.com/ongakuer/CircleIndicator
    implementation 'me.relex:circleindicator:2.1.6'

    // 腾讯 MMKV：https://github.com/Tencent/MMKV
    implementation 'com.tencent:mmkv-static:1.2.10'

    // 内存泄漏监测框架：https://github.com/square/leakcanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'
    previewImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

    //跑马灯
    implementation 'com.gongwen:marqueelibrary:1.1.3'

    //banner
    implementation 'io.github.youth5201314:banner:2.2.2'

    //指示器
    implementation 'com.github.hackware1993:MagicIndicator:1.7.0'

    //圆角imageview
    implementation 'com.github.zane618:NiceImageView:1.0.0'

    //拼音
    implementation 'com.github.promeg:tinypinyin:2.0.3' // TinyPinyin核心包，约80KB
    implementation 'com.github.promeg:tinypinyin-lexicons-android-cncity:2.0.3' // 可选，适用于Android的中国地区词典
    implementation 'com.github.promeg:tinypinyin-lexicons-java-cncity:2.0.3' // 可选，适用于Java的中国地区词典

    //适配器
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.4'

    //图片选择
    implementation 'io.github.lucksiege:pictureselector:v2.7.3-rc10'

    //头像
    implementation 'de.hdodenhof:circleimageview:3.1.0'


    implementation files('libs/bcprov-jdk15to18-1.71.jar')

    implementation 'com.github.Othershe:CombineBitmap:1.0.5'

    // TPNS SDK 主工程依赖包
    //      腾讯TPNS推送库
    implementation 'com.tencent.tpns:tpns:1.3.3.3-release'

}